// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model de Usu√°rio
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  tickets       Ticket[]   @relation("UserTickets")
  purchases     Purchase[] @relation("UserPurchases")
}

// Model de Rifa
model Raffle {
  id            String     @id @default(uuid())
  title         String
  description   String
  totalNumbers  Int
  maxSelections Int         
  createdAt     DateTime   @default(now())
  imageUrl      String?
  tickets       Ticket[]   @relation("RaffleTickets")
  purchases     Purchase[] @relation("RafflePurchases")
}

// Model de Ticket
model Ticket {
  id        String       @id @default(uuid())
  number    Int
  status    TicketStatus
  raffleId  String
  userId    String? // Nullable, preenchido se o ticket estiver reservado/pago
  createdAt DateTime     @default(now())
  raffle    Raffle       @relation("RaffleTickets", fields: [raffleId], references: [id])
  user      User?        @relation("UserTickets", fields: [userId], references: [id])
}

// Model de Compra
model Purchase {
  id            String        @id @default(uuid())
  userId        String
  raffleId      String
  totalAmount   Decimal       @db.Decimal(10, 2)
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  user          User          @relation("UserPurchases", fields: [userId], references: [id])
  raffle        Raffle        @relation("RafflePurchases", fields: [raffleId], references: [id])
}

// Enum para status do ticket
enum TicketStatus {
  available
  reserved
  paid
}

// Enum para status de pagamento
enum PaymentStatus {
  pending
  paid
}
